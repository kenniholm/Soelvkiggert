// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoelvkikkertMVC.Models;

namespace SoelvkikkertMVC.Migrations
{
    [DbContext(typeof(VitecContext))]
    [Migration("20191001090558_RowVersion")]
    partial class RowVersion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SoelvkikkertMVC.Models.PaymentInterval", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Discount");

                    b.Property<TimeSpan>("Interval");

                    b.HasKey("ID");

                    b.ToTable("Payment Interval");
                });

            modelBuilder.Entity("SoelvkikkertMVC.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("SubscriberID");

                    b.HasKey("ID");

                    b.HasIndex("SubscriberID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("SoelvkikkertMVC.Models.ProductPaymentInterval", b =>
                {
                    b.Property<int>("PaymentIntervalID");

                    b.Property<int>("ProductID");

                    b.HasKey("PaymentIntervalID", "ProductID");

                    b.ToTable("ProductPaymentInterval");
                });

            modelBuilder.Entity("SoelvkikkertMVC.Models.Subscriber", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ID");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("SoelvkikkertMVC.Models.SubscriberProduct", b =>
                {
                    b.Property<int>("SubscriberID");

                    b.Property<int>("ProductID");

                    b.Property<int>("PaymentIntervalID");

                    b.Property<DateTime>("SubscribtionEnd");

                    b.Property<DateTime>("SubscribtionStart");

                    b.HasKey("SubscriberID", "ProductID");

                    b.HasIndex("PaymentIntervalID");

                    b.ToTable("SubscriberProduct");
                });

            modelBuilder.Entity("SoelvkikkertMVC.Models.Product", b =>
                {
                    b.HasOne("SoelvkikkertMVC.Models.Subscriber")
                        .WithMany("products")
                        .HasForeignKey("SubscriberID");
                });

            modelBuilder.Entity("SoelvkikkertMVC.Models.SubscriberProduct", b =>
                {
                    b.HasOne("SoelvkikkertMVC.Models.PaymentInterval", "SelectedPaymentInterval")
                        .WithMany()
                        .HasForeignKey("PaymentIntervalID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
