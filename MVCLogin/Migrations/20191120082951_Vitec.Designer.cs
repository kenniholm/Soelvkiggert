// <auto-generated />
using System;
using MVCLogin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MVCLogin.Migrations
{
    [DbContext(typeof(VitecContext))]
    [Migration("20191120082951_Vitec")]
    partial class Vitec
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("MVCLogin.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Administrator")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("ID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("MVCLogin.Models.PaymentInterval", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Discount")
                        .HasColumnType("REAL");

                    b.Property<TimeSpan>("Interval")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("PaymentInterval");
                });

            modelBuilder.Entity("MVCLogin.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<int?>("SubscriberID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("SubscriberID");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("MVCLogin.Models.ProductPaymentInterval", b =>
                {
                    b.Property<int>("PaymentIntervalID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaymentIntervalID", "ProductID");

                    b.ToTable("ProductPaymentInterval");
                });

            modelBuilder.Entity("MVCLogin.Models.Subscriber", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("ID");

                    b.ToTable("Subscriber");
                });

            modelBuilder.Entity("MVCLogin.Models.SubscriberProduct", b =>
                {
                    b.Property<int>("SubscriberID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentIntervalID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubscriptionEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubscriptionStart")
                        .HasColumnType("TEXT");

                    b.HasKey("SubscriberID", "ProductID");

                    b.HasIndex("PaymentIntervalID");

                    b.ToTable("SubscriberProduct");
                });

            modelBuilder.Entity("MVCLogin.Models.Product", b =>
                {
                    b.HasOne("MVCLogin.Models.Subscriber", null)
                        .WithMany("products")
                        .HasForeignKey("SubscriberID");
                });

            modelBuilder.Entity("MVCLogin.Models.SubscriberProduct", b =>
                {
                    b.HasOne("MVCLogin.Models.PaymentInterval", "SelectedPaymentInterval")
                        .WithMany()
                        .HasForeignKey("PaymentIntervalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
